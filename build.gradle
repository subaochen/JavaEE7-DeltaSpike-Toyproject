plugins {
    // the spring dependency management plugin enables maven like dependency management of versions through BOMs
    id "io.spring.dependency-management" version "0.6.0.RELEASE"

    // need war plugin for JavaEE
    id "war"
}

group 'de.thatsich'
version '1.0.0-SNAPSHOT'

def VERSION_LOG4J2 = "2.6.2"
def VERSION_DELTASPIKE = "1.7.1"
def VERSION_WILDFLY = "10.0.0.Final"
def VERSION_ARQUILLIAN = "1.0.0.Alpha3"
def NAME_WILDFLY = "wildfly-$VERSION_WILDFLY"
def NAME_WILDFLY_TEST = NAME_WILDFLY + "-test"
def HOME_WILDFLY_TEST = new File(project.buildDir, NAME_WILDFLY_TEST)

dependencyManagement {
    imports {
        // Log4j2 BOM
        mavenBom "org.apache.logging.log4j:log4j-bom:$VERSION_LOG4J2"

        // BOM for DeltaSpike modules
        mavenBom "org.apache.deltaspike.distribution:distributions-bom:$VERSION_DELTASPIKE"

        // specific BOM to have all dependencies match-up to be able to run on Wildfly
        mavenBom "org.wildfly.bom:wildfly-javaee7-with-tools:$VERSION_WILDFLY"

        // for testing
        mavenBom "org.arquillian:arquillian-universe:$VERSION_ARQUILLIAN"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    mavenCentral()
}

configurations {
    wildfly
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Java EE API
    providedCompile group: 'javax', name: 'javaee-api', version: '7.0'

    // to auto-download wildfly
    wildfly "org.wildfly:wildfly-dist:$VERSION_WILDFLY@zip"

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl'


    // DeltaSpike dependencies
    compile 'org.apache.deltaspike.core:deltaspike-core-api'
    runtime 'org.apache.deltaspike.core:deltaspike-core-impl'

    runtime 'org.apache.deltaspike.modules:deltaspike-data-module-impl'
    compile 'org.apache.deltaspike.modules:deltaspike-data-module-api'


    // test dependencies
    // =================
    // wildfly
    testCompile 'org.wildfly.arquillian:wildfly-arquillian-container-embedded:2.0.0.Final'

    testCompile 'org.arquillian.universe:arquillian-junit'
    testCompile 'org.arquillian.universe:arquillian-drone'

    // this offers dependency resolution for gradle via ShrinkWrap
    testCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.2'

    // junit frameworks provides the test environment for java
    testCompile 'junit:junit:4.12'
    // use AssertJ and not that shitty Hamcrest anymore
    testCompile 'org.assertj:assertj-core:3.5.2'
}

test {
    systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

tasks.withType(AbstractCompile) each { it.options.encoding = 'UTF-8' }

task resolveWildfly(type: Copy) {
    destinationDir = project.buildDir
    from { zipTree(configurations.wildfly.singleFile) }
}
task resolveTestWildfly(type: Copy) {
    destinationDir = project.buildDir
    from { zipTree(configurations.wildfly.singleFile) }

    doLast {
        def originalWildflyDirectory = file("${project.buildDir}/${NAME_WILDFLY}")
        def newWildflyDirectory = file("${project.buildDir}/${NAME_WILDFLY_TEST}")

        originalWildflyDirectory.renameTo(newWildflyDirectory)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

test.dependsOn resolveTestWildfly

// use this to modify the arquillian.xml to point to the downloaded wildfly instance
processTestResources {
    from(sourceSets.test.resources.srcDirs) {
        include 'arquillian.xml'
        expand 'HOME_WILDFLY_TEST': HOME_WILDFLY_TEST
    }
}
